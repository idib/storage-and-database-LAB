/*
 * This file is generated by jOOQ.
 */
package com.sadb.generated.source.oracle.tables;


import com.sadb.generated.source.oracle.Indexes;
import com.sadb.generated.source.oracle.Keys;
import com.sadb.generated.source.oracle.User1;
import com.sadb.generated.source.oracle.tables.records.StudentRecord;

import java.math.BigInteger;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Student extends TableImpl<StudentRecord> {

    private static final long serialVersionUID = 1044073960;

    /**
     * The reference instance of <code>USER1.STUDENT</code>
     */
    public static final Student STUDENT = new Student();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentRecord> getRecordType() {
        return StudentRecord.class;
    }

    /**
     * The column <code>USER1.STUDENT.EDUCATION_TYPE</code>.
     */
    public final TableField<StudentRecord, String> EDUCATION_TYPE = createField("EDUCATION_TYPE", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>USER1.STUDENT.GROUP_ID</code>.
     */
    public final TableField<StudentRecord, BigInteger> GROUP_ID = createField("GROUP_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38), this, "");

    /**
     * The column <code>USER1.STUDENT.STUDENT_ID</code>.
     */
    public final TableField<StudentRecord, BigInteger> STUDENT_ID = createField("STUDENT_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38).nullable(false), this, "");

    /**
     * The column <code>USER1.STUDENT.CREAT_TIME</code>.
     */
    public final TableField<StudentRecord, Date> CREAT_TIME = createField("CREAT_TIME", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>USER1.STUDENT.UPDATE_TIME</code>.
     */
    public final TableField<StudentRecord, Date> UPDATE_TIME = createField("UPDATE_TIME", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>USER1.STUDENT.SECOND_NAME</code>.
     */
    public final TableField<StudentRecord, String> SECOND_NAME = createField("SECOND_NAME", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>USER1.STUDENT.FIRST_NAME</code>.
     */
    public final TableField<StudentRecord, String> FIRST_NAME = createField("FIRST_NAME", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>USER1.STUDENT.PATRONYMIC_NAME</code>.
     */
    public final TableField<StudentRecord, String> PATRONYMIC_NAME = createField("PATRONYMIC_NAME", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>USER1.STUDENT.BIRTH_DATE</code>.
     */
    public final TableField<StudentRecord, Date> BIRTH_DATE = createField("BIRTH_DATE", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>USER1.STUDENT.BIRTH_PLACE</code>.
     */
    public final TableField<StudentRecord, String> BIRTH_PLACE = createField("BIRTH_PLACE", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * Create a <code>USER1.STUDENT</code> table reference
     */
    public Student() {
        this(DSL.name("STUDENT"), null);
    }

    /**
     * Create an aliased <code>USER1.STUDENT</code> table reference
     */
    public Student(String alias) {
        this(DSL.name(alias), STUDENT);
    }

    /**
     * Create an aliased <code>USER1.STUDENT</code> table reference
     */
    public Student(Name alias) {
        this(alias, STUDENT);
    }

    private Student(Name alias, Table<StudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Student(Name alias, Table<StudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Student(Table<O> child, ForeignKey<O, StudentRecord> key) {
        super(child, key, STUDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return User1.USER1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.XPK_STUDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudentRecord> getPrimaryKey() {
        return Keys.XPK_STUDENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudentRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentRecord>>asList(Keys.XPK_STUDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StudentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StudentRecord, ?>>asList(Keys.R_28);
    }

    public Groups groups() {
        return new Groups(this, Keys.R_28);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Student as(String alias) {
        return new Student(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Student as(Name alias) {
        return new Student(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(String name) {
        return new Student(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(Name name) {
        return new Student(name, null);
    }
}
