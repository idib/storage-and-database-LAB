/*
 * This file is generated by jOOQ.
 */
package com.sadb.generated.source.oracle.tables;


import com.sadb.generated.source.oracle.Indexes;
import com.sadb.generated.source.oracle.Keys;
import com.sadb.generated.source.oracle.User1;
import com.sadb.generated.source.oracle.tables.records.SpecialityRecord;

import java.math.BigInteger;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Speciality extends TableImpl<SpecialityRecord> {

    private static final long serialVersionUID = 1426919776;

    /**
     * The reference instance of <code>USER1.SPECIALITY</code>
     */
    public static final Speciality SPECIALITY = new Speciality();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpecialityRecord> getRecordType() {
        return SpecialityRecord.class;
    }

    /**
     * The column <code>USER1.SPECIALITY.SPEC_ID</code>.
     */
    public final TableField<SpecialityRecord, BigInteger> SPEC_ID = createField("SPEC_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38).nullable(false), this, "");

    /**
     * The column <code>USER1.SPECIALITY.SPEC_NAME</code>.
     */
    public final TableField<SpecialityRecord, String> SPEC_NAME = createField("SPEC_NAME", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>USER1.SPECIALITY.SPEC_DEGREE</code>.
     */
    public final TableField<SpecialityRecord, String> SPEC_DEGREE = createField("SPEC_DEGREE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>USER1.SPECIALITY.FREE_EDUC_COUNT</code>.
     */
    public final TableField<SpecialityRecord, BigInteger> FREE_EDUC_COUNT = createField("FREE_EDUC_COUNT", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38), this, "");

    /**
     * The column <code>USER1.SPECIALITY.PAID_EDUC_COUNT</code>.
     */
    public final TableField<SpecialityRecord, BigInteger> PAID_EDUC_COUNT = createField("PAID_EDUC_COUNT", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38), this, "");

    /**
     * The column <code>USER1.SPECIALITY.SPONSORED_EDUC_COUNT</code>.
     */
    public final TableField<SpecialityRecord, BigInteger> SPONSORED_EDUC_COUNT = createField("SPONSORED_EDUC_COUNT", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38), this, "");

    /**
     * The column <code>USER1.SPECIALITY.PROG_ID</code>.
     */
    public final TableField<SpecialityRecord, BigInteger> PROG_ID = createField("PROG_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38), this, "");

    /**
     * The column <code>USER1.SPECIALITY.CREAT_TIME</code>.
     */
    public final TableField<SpecialityRecord, Date> CREAT_TIME = createField("CREAT_TIME", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>USER1.SPECIALITY.UPDATE_TIME</code>.
     */
    public final TableField<SpecialityRecord, Date> UPDATE_TIME = createField("UPDATE_TIME", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>USER1.SPECIALITY</code> table reference
     */
    public Speciality() {
        this(DSL.name("SPECIALITY"), null);
    }

    /**
     * Create an aliased <code>USER1.SPECIALITY</code> table reference
     */
    public Speciality(String alias) {
        this(DSL.name(alias), SPECIALITY);
    }

    /**
     * Create an aliased <code>USER1.SPECIALITY</code> table reference
     */
    public Speciality(Name alias) {
        this(alias, SPECIALITY);
    }

    private Speciality(Name alias, Table<SpecialityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Speciality(Name alias, Table<SpecialityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Speciality(Table<O> child, ForeignKey<O, SpecialityRecord> key) {
        super(child, key, SPECIALITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return User1.USER1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.XPK_PROGR_SPECIALITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SpecialityRecord> getPrimaryKey() {
        return Keys.XPK_PROGR_SPECIALITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SpecialityRecord>> getKeys() {
        return Arrays.<UniqueKey<SpecialityRecord>>asList(Keys.XPK_PROGR_SPECIALITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SpecialityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SpecialityRecord, ?>>asList(Keys.R_26);
    }

    public ProgramTrack programTrack() {
        return new ProgramTrack(this, Keys.R_26);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Speciality as(String alias) {
        return new Speciality(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Speciality as(Name alias) {
        return new Speciality(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Speciality rename(String name) {
        return new Speciality(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Speciality rename(Name name) {
        return new Speciality(name, null);
    }
}
