/*
 * This file is generated by jOOQ.
 */
package com.sadb.generated.dest.oracle.tables;


import com.sadb.generated.dest.oracle.Indexes;
import com.sadb.generated.dest.oracle.Keys;
import com.sadb.generated.dest.oracle.Sanddb;
import com.sadb.generated.dest.oracle.tables.records.ConferenceRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conference extends TableImpl<ConferenceRecord> {

    private static final long serialVersionUID = 1576846761;

    /**
     * The reference instance of <code>SANDDB.CONFERENCE</code>
     */
    public static final Conference CONFERENCE = new Conference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConferenceRecord> getRecordType() {
        return ConferenceRecord.class;
    }

    /**
     * The column <code>SANDDB.CONFERENCE.ID</code>.
     */
    public final TableField<ConferenceRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SANDDB.CONFERENCE.NAME</code>.
     */
    public final TableField<ConferenceRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>SANDDB.CONFERENCE.VENUE</code>.
     */
    public final TableField<ConferenceRecord, String> VENUE = createField("VENUE", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>SANDDB.CONFERENCE.DATE_CONFERENCE</code>.
     */
    public final TableField<ConferenceRecord, Date> DATE_CONFERENCE = createField("DATE_CONFERENCE", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>SANDDB.CONFERENCE.DATA_UPDATE</code>.
     */
    public final TableField<ConferenceRecord, Timestamp> DATA_UPDATE = createField("DATA_UPDATE", org.jooq.impl.SQLDataType.TIMESTAMP.precision(38).nullable(false), this, "");

    /**
     * The column <code>SANDDB.CONFERENCE.DATA_CREATE</code>.
     */
    public final TableField<ConferenceRecord, Timestamp> DATA_CREATE = createField("DATA_CREATE", org.jooq.impl.SQLDataType.TIMESTAMP.precision(38).nullable(false), this, "");

    /**
     * Create a <code>SANDDB.CONFERENCE</code> table reference
     */
    public Conference() {
        this(DSL.name("CONFERENCE"), null);
    }

    /**
     * Create an aliased <code>SANDDB.CONFERENCE</code> table reference
     */
    public Conference(String alias) {
        this(DSL.name(alias), CONFERENCE);
    }

    /**
     * Create an aliased <code>SANDDB.CONFERENCE</code> table reference
     */
    public Conference(Name alias) {
        this(alias, CONFERENCE);
    }

    private Conference(Name alias, Table<ConferenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conference(Name alias, Table<ConferenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Conference(Table<O> child, ForeignKey<O, ConferenceRecord> key) {
        super(child, key, CONFERENCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sanddb.SANDDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_C005172);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConferenceRecord> getPrimaryKey() {
        return Keys.SYS_C005172;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConferenceRecord>> getKeys() {
        return Arrays.<UniqueKey<ConferenceRecord>>asList(Keys.SYS_C005172);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conference as(String alias) {
        return new Conference(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conference as(Name alias) {
        return new Conference(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conference rename(String name) {
        return new Conference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conference rename(Name name) {
        return new Conference(name, null);
    }
}
