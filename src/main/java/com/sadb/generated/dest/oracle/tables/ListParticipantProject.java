/*
 * This file is generated by jOOQ.
 */
package com.sadb.generated.dest.oracle.tables;


import com.sadb.generated.dest.oracle.Keys;
import com.sadb.generated.dest.oracle.Sanddb;
import com.sadb.generated.dest.oracle.tables.records.ListParticipantProjectRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ListParticipantProject extends TableImpl<ListParticipantProjectRecord> {

    private static final long serialVersionUID = 1280737906;

    /**
     * The reference instance of <code>SANDDB.LIST_PARTICIPANT_PROJECT</code>
     */
    public static final ListParticipantProject LIST_PARTICIPANT_PROJECT = new ListParticipantProject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListParticipantProjectRecord> getRecordType() {
        return ListParticipantProjectRecord.class;
    }

    /**
     * The column <code>SANDDB.LIST_PARTICIPANT_PROJECT.PARTICIPANT_ID</code>.
     */
    public final TableField<ListParticipantProjectRecord, Long> PARTICIPANT_ID = createField("PARTICIPANT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SANDDB.LIST_PARTICIPANT_PROJECT.PROJECT_ID</code>.
     */
    public final TableField<ListParticipantProjectRecord, Long> PROJECT_ID = createField("PROJECT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SANDDB.LIST_PARTICIPANT_PROJECT.DATA_UPDATE</code>.
     */
    public final TableField<ListParticipantProjectRecord, Timestamp> DATA_UPDATE = createField("DATA_UPDATE", org.jooq.impl.SQLDataType.TIMESTAMP.precision(38).nullable(false), this, "");

    /**
     * The column <code>SANDDB.LIST_PARTICIPANT_PROJECT.DATA_CREATE</code>.
     */
    public final TableField<ListParticipantProjectRecord, Timestamp> DATA_CREATE = createField("DATA_CREATE", org.jooq.impl.SQLDataType.TIMESTAMP.precision(38).nullable(false), this, "");

    /**
     * Create a <code>SANDDB.LIST_PARTICIPANT_PROJECT</code> table reference
     */
    public ListParticipantProject() {
        this(DSL.name("LIST_PARTICIPANT_PROJECT"), null);
    }

    /**
     * Create an aliased <code>SANDDB.LIST_PARTICIPANT_PROJECT</code> table reference
     */
    public ListParticipantProject(String alias) {
        this(DSL.name(alias), LIST_PARTICIPANT_PROJECT);
    }

    /**
     * Create an aliased <code>SANDDB.LIST_PARTICIPANT_PROJECT</code> table reference
     */
    public ListParticipantProject(Name alias) {
        this(alias, LIST_PARTICIPANT_PROJECT);
    }

    private ListParticipantProject(Name alias, Table<ListParticipantProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private ListParticipantProject(Name alias, Table<ListParticipantProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ListParticipantProject(Table<O> child, ForeignKey<O, ListParticipantProjectRecord> key) {
        super(child, key, LIST_PARTICIPANT_PROJECT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sanddb.SANDDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ListParticipantProjectRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ListParticipantProjectRecord, ?>>asList(Keys.LIST_PARTICIPANT_PROJECT_FK0, Keys.LIST_PARTICIPANT_PROJECT_FK1);
    }

    public Student student() {
        return new Student(this, Keys.LIST_PARTICIPANT_PROJECT_FK0);
    }

    public ScientificProject scientificProject() {
        return new ScientificProject(this, Keys.LIST_PARTICIPANT_PROJECT_FK1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ListParticipantProject as(String alias) {
        return new ListParticipantProject(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ListParticipantProject as(Name alias) {
        return new ListParticipantProject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ListParticipantProject rename(String name) {
        return new ListParticipantProject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListParticipantProject rename(Name name) {
        return new ListParticipantProject(name, null);
    }
}
