/*
 * This file is generated by jOOQ.
 */
package com.sadb.generated.dest.oracle.tables;


import com.sadb.generated.dest.oracle.Indexes;
import com.sadb.generated.dest.oracle.Keys;
import com.sadb.generated.dest.oracle.Sanddb;
import com.sadb.generated.dest.oracle.tables.records.TypeEditionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeEdition extends TableImpl<TypeEditionRecord> {

    private static final long serialVersionUID = 1820117814;

    /**
     * The reference instance of <code>SANDDB.TYPE_EDITION</code>
     */
    public static final TypeEdition TYPE_EDITION = new TypeEdition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeEditionRecord> getRecordType() {
        return TypeEditionRecord.class;
    }

    /**
     * The column <code>SANDDB.TYPE_EDITION.ID</code>.
     */
    public final TableField<TypeEditionRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SANDDB.TYPE_EDITION.NAME</code>.
     */
    public final TableField<TypeEditionRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>SANDDB.TYPE_EDITION.DATA_UPDATE</code>.
     */
    public final TableField<TypeEditionRecord, Timestamp> DATA_UPDATE = createField("DATA_UPDATE", org.jooq.impl.SQLDataType.TIMESTAMP.precision(38).nullable(false), this, "");

    /**
     * The column <code>SANDDB.TYPE_EDITION.DATA_CREATE</code>.
     */
    public final TableField<TypeEditionRecord, Timestamp> DATA_CREATE = createField("DATA_CREATE", org.jooq.impl.SQLDataType.TIMESTAMP.precision(38).nullable(false), this, "");

    /**
     * Create a <code>SANDDB.TYPE_EDITION</code> table reference
     */
    public TypeEdition() {
        this(DSL.name("TYPE_EDITION"), null);
    }

    /**
     * Create an aliased <code>SANDDB.TYPE_EDITION</code> table reference
     */
    public TypeEdition(String alias) {
        this(DSL.name(alias), TYPE_EDITION);
    }

    /**
     * Create an aliased <code>SANDDB.TYPE_EDITION</code> table reference
     */
    public TypeEdition(Name alias) {
        this(alias, TYPE_EDITION);
    }

    private TypeEdition(Name alias, Table<TypeEditionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TypeEdition(Name alias, Table<TypeEditionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TypeEdition(Table<O> child, ForeignKey<O, TypeEditionRecord> key) {
        super(child, key, TYPE_EDITION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sanddb.SANDDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_C005191);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TypeEditionRecord> getPrimaryKey() {
        return Keys.SYS_C005191;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TypeEditionRecord>> getKeys() {
        return Arrays.<UniqueKey<TypeEditionRecord>>asList(Keys.SYS_C005191);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeEdition as(String alias) {
        return new TypeEdition(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeEdition as(Name alias) {
        return new TypeEdition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TypeEdition rename(String name) {
        return new TypeEdition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TypeEdition rename(Name name) {
        return new TypeEdition(name, null);
    }
}
