/*
 * This file is generated by jOOQ.
 */
package com.sadb.generated.dest.oracle.tables;


import com.sadb.generated.dest.oracle.Indexes;
import com.sadb.generated.dest.oracle.Keys;
import com.sadb.generated.dest.oracle.Sanddb;
import com.sadb.generated.dest.oracle.tables.records.SyncLogRecord;

import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SyncLog extends TableImpl<SyncLogRecord> {

    private static final long serialVersionUID = 17621569;

    /**
     * The reference instance of <code>SANDDB.SYNC_LOG</code>
     */
    public static final SyncLog SYNC_LOG = new SyncLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SyncLogRecord> getRecordType() {
        return SyncLogRecord.class;
    }

    /**
     * The column <code>SANDDB.SYNC_LOG.ID</code>.
     */
    public final TableField<SyncLogRecord, BigInteger> ID = createField("ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38).nullable(false), this, "");

    /**
     * The column <code>SANDDB.SYNC_LOG.DB_TYPE</code>.
     */
    public final TableField<SyncLogRecord, BigInteger> DB_TYPE = createField("DB_TYPE", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38).nullable(false), this, "");

    /**
     * The column <code>SANDDB.SYNC_LOG.TIMESTAMP</code>.
     */
    public final TableField<SyncLogRecord, Timestamp> TIMESTAMP = createField("TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP.precision(38).nullable(false).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>SANDDB.SYNC_LOG</code> table reference
     */
    public SyncLog() {
        this(DSL.name("SYNC_LOG"), null);
    }

    /**
     * Create an aliased <code>SANDDB.SYNC_LOG</code> table reference
     */
    public SyncLog(String alias) {
        this(DSL.name(alias), SYNC_LOG);
    }

    /**
     * Create an aliased <code>SANDDB.SYNC_LOG</code> table reference
     */
    public SyncLog(Name alias) {
        this(alias, SYNC_LOG);
    }

    private SyncLog(Name alias, Table<SyncLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SyncLog(Name alias, Table<SyncLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SyncLog(Table<O> child, ForeignKey<O, SyncLogRecord> key) {
        super(child, key, SYNC_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sanddb.SANDDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_C005369);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SyncLogRecord> getPrimaryKey() {
        return Keys.SYS_C005369;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SyncLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SyncLogRecord>>asList(Keys.SYS_C005369);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SyncLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SyncLogRecord, ?>>asList(Keys.SYNC_LOG_DB_ID_FK);
    }

    public Db db() {
        return new Db(this, Keys.SYNC_LOG_DB_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SyncLog as(String alias) {
        return new SyncLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SyncLog as(Name alias) {
        return new SyncLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SyncLog rename(String name) {
        return new SyncLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SyncLog rename(Name name) {
        return new SyncLog(name, null);
    }
}
