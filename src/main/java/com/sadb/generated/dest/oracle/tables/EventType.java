/*
 * This file is generated by jOOQ.
 */
package com.sadb.generated.dest.oracle.tables;


import com.sadb.generated.dest.oracle.Indexes;
import com.sadb.generated.dest.oracle.Keys;
import com.sadb.generated.dest.oracle.Sanddb;
import com.sadb.generated.dest.oracle.tables.records.EventTypeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventType extends TableImpl<EventTypeRecord> {

    private static final long serialVersionUID = 1394277486;

    /**
     * The reference instance of <code>SANDDB.EVENT_TYPE</code>
     */
    public static final EventType EVENT_TYPE = new EventType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventTypeRecord> getRecordType() {
        return EventTypeRecord.class;
    }

    /**
     * The column <code>SANDDB.EVENT_TYPE.ID</code>.
     */
    public final TableField<EventTypeRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SANDDB.EVENT_TYPE.NAME</code>.
     */
    public final TableField<EventTypeRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>SANDDB.EVENT_TYPE.DATE_UPDATE</code>.
     */
    public final TableField<EventTypeRecord, Timestamp> DATE_UPDATE = createField("DATE_UPDATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>SANDDB.EVENT_TYPE.DATE_CREATE</code>.
     */
    public final TableField<EventTypeRecord, Timestamp> DATE_CREATE = createField("DATE_CREATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>SANDDB.EVENT_TYPE</code> table reference
     */
    public EventType() {
        this(DSL.name("EVENT_TYPE"), null);
    }

    /**
     * Create an aliased <code>SANDDB.EVENT_TYPE</code> table reference
     */
    public EventType(String alias) {
        this(DSL.name(alias), EVENT_TYPE);
    }

    /**
     * Create an aliased <code>SANDDB.EVENT_TYPE</code> table reference
     */
    public EventType(Name alias) {
        this(alias, EVENT_TYPE);
    }

    private EventType(Name alias, Table<EventTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventType(Name alias, Table<EventTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EventType(Table<O> child, ForeignKey<O, EventTypeRecord> key) {
        super(child, key, EVENT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sanddb.SANDDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENT_TYPE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventTypeRecord> getPrimaryKey() {
        return Keys.EVENT_TYPE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<EventTypeRecord>>asList(Keys.EVENT_TYPE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventType as(String alias) {
        return new EventType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventType as(Name alias) {
        return new EventType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventType rename(String name) {
        return new EventType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventType rename(Name name) {
        return new EventType(name, null);
    }
}
