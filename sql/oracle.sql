
CREATE SEQUENCE SEQ_ACADEMIC_YEAR;



CREATE SEQUENCE SEQ_CLASS_ROOM;



CREATE SEQUENCE SEQ_DISCIPLINE;



CREATE SEQUENCE SEQ_FACULTY;



CREATE SEQUENCE SEQ_FACULTY_LECTURER;



CREATE SEQUENCE SEQ_GROUP;



CREATE SEQUENCE SEQ_LECTURER;



CREATE SEQUENCE SEQ_MEGAFACULTY;



CREATE SEQUENCE SEQ_OCCUPATION;



CREATE SEQUENCE SEQ_ODEVITY_WEEK;



CREATE SEQUENCE SEQ_PROGRAM_TRACK;



CREATE SEQUENCE SEQ_RESULTS;



CREATE SEQUENCE SEQ_SPECIALITY;



CREATE SEQUENCE SEQ_STUDENT;



CREATE SEQUENCE SEQ_VARIANT_OCCUPATION;



CREATE SEQUENCE SEQ_WEEK_DAY;



CREATE TABLE ACADEMIC_YEAR
(
	ACADEM_YEAR          VARCHAR2(20) NULL ,
	ACADEM_YEAR_ID       INTEGER NOT NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_ACADEMIC_YEAR ON ACADEMIC_YEAR
	(ACADEM_YEAR_ID   ASC);



ALTER TABLE ACADEMIC_YEAR
	ADD CONSTRAINT  XPK_ACADEMIC_YEAR PRIMARY KEY (ACADEM_YEAR_ID);



CREATE TABLE CLASS_ROOM
(
	CLASS_ID             INTEGER NOT NULL ,
	CLASS_NUMBER         INTEGER NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_CLASS_ROOM ON CLASS_ROOM
	(CLASS_ID   ASC);



ALTER TABLE CLASS_ROOM
	ADD CONSTRAINT  XPK_CLASS_ROOM PRIMARY KEY (CLASS_ID);



CREATE TABLE DISCIPLINE
(
	DISCIPLINE_ID        INTEGER NOT NULL ,
	DISCIPLINE_NAME      VARCHAR2(20) NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_DISCIPLINE ON DISCIPLINE
	(DISCIPLINE_ID   ASC);



ALTER TABLE DISCIPLINE
	ADD CONSTRAINT  XPK_DISCIPLINE PRIMARY KEY (DISCIPLINE_ID);



CREATE TABLE FACULTY
(
	FAC_ID               INTEGER NOT NULL ,
	FAC_NAME             VARCHAR2(20) NULL ,
	MEGAFAC_ID           INTEGER NOT NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_FAC ON FACULTY
	(FAC_ID   ASC);



ALTER TABLE FACULTY
	ADD CONSTRAINT  XPK_FAC PRIMARY KEY (FAC_ID);



CREATE TABLE FACULTY_LECTURER
(
	FAC_ID               INTEGER NOT NULL ,
	FAC_LECT_ID          INTEGER NOT NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL ,
	LEC_ID               INTEGER NOT NULL
);



CREATE UNIQUE INDEX XPK_FAC_LECTUR ON FACULTY_LECTURER
	(FAC_LECT_ID   ASC);



ALTER TABLE FACULTY_LECTURER
	ADD CONSTRAINT  XPK_FAC_LECTUR PRIMARY KEY (FAC_LECT_ID);



CREATE TABLE GROUPS
(
	GROUP_ID             INTEGER NOT NULL ,
	SPEC_ID              INTEGER NULL ,
	GROUP_NUM            VARCHAR2(20) NULL ,
	COURSE               INTEGER NULL ,
	EDUCATION_TIME_FROM  DATE NULL ,
	EDUCATION_TIME_TO    DATE NULL ,
	ACADEM_YEAR_ID       INTEGER NOT NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_GROUP ON GROUPS
	(GROUP_ID   ASC);



ALTER TABLE GROUPS
	ADD CONSTRAINT  XPK_GROUP PRIMARY KEY (GROUP_ID);



CREATE TABLE LECTURER
(
	POST                 VARCHAR2(20) NULL ,
	WORK_PERIOD_FROM     DATE NULL ,
	WORK_PERIOD_TO       DATE NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL ,
	LEC_ID               INTEGER NOT NULL ,
	SECOND_NAME          VARCHAR2(20) NULL ,
	FIRST_NAME           VARCHAR2(20) NULL ,
	PATRONYMIC_NAME      VARCHAR2(20) NULL ,
	BIRTH_DATE           DATE NULL ,
	BIRTH_PLACE          VARCHAR2(20) NULL
);



CREATE UNIQUE INDEX XPK_LECTURER ON LECTURER
	(LEC_ID   ASC);



ALTER TABLE LECTURER
	ADD CONSTRAINT  XPK_LECTURER PRIMARY KEY (LEC_ID);



CREATE TABLE MEGAFACULTY
(
	MEGAFAC_ID           INTEGER NOT NULL ,
	MFACULTY_NAME        VARCHAR2(20) NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_MFAC ON MEGAFACULTY
	(MEGAFAC_ID   ASC);



ALTER TABLE MEGAFACULTY
	ADD CONSTRAINT  XPK_MFAC PRIMARY KEY (MEGAFAC_ID);



CREATE TABLE OCCUPATION
(
	OCCUPATION_ID        INTEGER NOT NULL ,
	OCCUPATON_NUM        INTEGER NULL ,
	OCCUPATION_TIME_FROM DATE NULL ,
	OCCUPATION_TIME_TO   DATE NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_OCCUPATION ON OCCUPATION
	(OCCUPATION_ID   ASC);



ALTER TABLE OCCUPATION
	ADD CONSTRAINT  XPK_OCCUPATION PRIMARY KEY (OCCUPATION_ID);



CREATE TABLE ODEVITY_WEEK
(
	ODEVITY_ID           INTEGER NOT NULL ,
	WEEK                 VARCHAR2(20) NULL  CONSTRAINT  VR_WEEK CHECK (WEEK IN ('EVEN', 'UNEVER')),
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_ODEVITY_WEEK ON ODEVITY_WEEK
	(ODEVITY_ID   ASC);



ALTER TABLE ODEVITY_WEEK
	ADD CONSTRAINT  XPK_ODEVITY_WEEK PRIMARY KEY (ODEVITY_ID);



CREATE TABLE PROGRAM_TRACK
(
	PROG_ID              INTEGER NOT NULL ,
	FAC_ID               INTEGER NULL ,
	PROGM_NAME           VARCHAR2(20) NULL ,
	PROGRAM_TRACK_NUM    VARCHAR2(20) NULL ,
	PROGM_TYPE           VARCHAR2(20) NULL  CONSTRAINT  VR_TYPE CHECK (PROGM_TYPE IN ('FULL_TIME', 'PART_TIME')),
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_PROGRAM_TRACK ON PROGRAM_TRACK
	(PROG_ID   ASC);



ALTER TABLE PROGRAM_TRACK
	ADD CONSTRAINT  XPK_PROGRAM_TRACK PRIMARY KEY (PROG_ID);



CREATE TABLE RESULTS
(
	RESULT               VARCHAR2(20) NULL ,
	EX_TYPE              VARCHAR2(20) NULL  CONSTRAINT  VR_RESULT_TYPE CHECK (EX_TYPE IN ('EXAM', 'PASS_FAIL_EXAM')),
	DISCIPLINE_ID        INTEGER NOT NULL ,
	RESULT_DATE          DATE NULL ,
	RESULT_EU            VARCHAR2(20) NULL ,
	ACADEM_YEAR_ID       INTEGER NOT NULL ,
	RESULT_ID            INTEGER NOT NULL ,
	STUDENT_ID           INTEGER NOT NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_RESULTS ON RESULTS
	(RESULT_ID   ASC);



ALTER TABLE RESULTS
	ADD CONSTRAINT  XPK_RESULTS PRIMARY KEY (RESULT_ID);



CREATE TABLE SPECIALITY
(
	SPEC_ID              INTEGER NOT NULL ,
	SPEC_NAME            VARCHAR2(20) NULL ,
	SPEC_NUMBER          VARCHAR2(20) NULL ,
	SPEC_DEGREE          VARCHAR2(10) NULL  CONSTRAINT  VR_DEGREE CHECK (SPEC_DEGREE IN ('MAGISTER', 'BACHELOR')),
	FREE_EDUC_COUNT      INTEGER NULL ,
	PAID_EDUC_COUNT      INTEGER NULL ,
	SPONSORED_EDUC_COUNT INTEGER NULL ,
	PROG_ID              INTEGER NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_PROGR_SPECIALITY ON SPECIALITY
	(SPEC_ID   ASC);



ALTER TABLE SPECIALITY
	ADD CONSTRAINT  XPK_PROGR_SPECIALITY PRIMARY KEY (SPEC_ID);



CREATE TABLE STUDENT
(
	EDUCATION_TYPE       VARCHAR2(20) NULL  CONSTRAINT  VR_EDUCATION_TYPE CHECK (EDUCATION_TYPE IN ('FREE', 'PAID', 'SPONSORED')),
	GROUP_ID             INTEGER NULL ,
	STUDENT_ID           INTEGER NOT NULL ,
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL ,
	SECOND_NAME          VARCHAR2(20) NULL ,
	FIRST_NAME           VARCHAR2(20) NULL ,
	PATRONYMIC_NAME      VARCHAR2(20) NULL ,
	BIRTH_DATE           DATE NULL ,
	BIRTH_PLACE          VARCHAR2(20) NULL
);



CREATE UNIQUE INDEX XPK_STUDENT ON STUDENT
	(STUDENT_ID   ASC);



ALTER TABLE STUDENT
	ADD CONSTRAINT  XPK_STUDENT PRIMARY KEY (STUDENT_ID);



CREATE TABLE TIME_TABLE
(
	WEEK_DAY_ID          INTEGER NOT NULL ,
	OCCUPATION_ID        INTEGER NOT NULL ,
	ODEVITY_ID           INTEGER NOT NULL ,
	VARIANT_OCCUPATION_ID INTEGER NOT NULL ,
	CLASS_ID             INTEGER NOT NULL ,
	GROUP_ID             INTEGER NOT NULL ,
	DISCIPLINE_ID        INTEGER NOT NULL
);



CREATE UNIQUE INDEX XPK_TIME_TABLE ON TIME_TABLE
	(OCCUPATION_ID   ASC,WEEK_DAY_ID   ASC,ODEVITY_ID   ASC,VARIANT_OCCUPATION_ID   ASC,CLASS_ID   ASC,GROUP_ID   ASC,DISCIPLINE_ID   ASC);



ALTER TABLE TIME_TABLE
	ADD CONSTRAINT  XPK_TIME_TABLE PRIMARY KEY (OCCUPATION_ID,WEEK_DAY_ID,ODEVITY_ID,VARIANT_OCCUPATION_ID,CLASS_ID,GROUP_ID,DISCIPLINE_ID);



CREATE TABLE VARIANT_OCCUPATION
(
	VARIANT_OCCUPATION_ID INTEGER NOT NULL ,
	VAR_OCC_TYPE         VARCHAR2(20) NULL  CONSTRAINT  VR_OCCUPATION_TYPE CHECK (VAR_OCC_TYPE IN ('LECTURE', 'PRACTIC')),
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_ARIANT_OCC ON VARIANT_OCCUPATION
	(VARIANT_OCCUPATION_ID   ASC);



ALTER TABLE VARIANT_OCCUPATION
	ADD CONSTRAINT  XPK_ARIANT_OCC PRIMARY KEY (VARIANT_OCCUPATION_ID);



CREATE TABLE WEEK_DAY
(
	WEEK_DAY_ID          INTEGER NOT NULL ,
	DAY                  VARCHAR2(20) NULL  CONSTRAINT  VR_DAY CHECK (DAY IN ('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY')),
	CREAT_TIME           DATE NULL ,
	UPDATE_TIME          DATE NULL
);



CREATE UNIQUE INDEX XPK_WEEK_DAY ON WEEK_DAY
	(WEEK_DAY_ID   ASC);



ALTER TABLE WEEK_DAY
	ADD CONSTRAINT  XPK_WEEK_DAY PRIMARY KEY (WEEK_DAY_ID);



ALTER TABLE FACULTY
	ADD (CONSTRAINT R_33 FOREIGN KEY (MEGAFAC_ID) REFERENCES MEGAFACULTY (MEGAFAC_ID));



ALTER TABLE FACULTY_LECTURER
	ADD (CONSTRAINT R_15 FOREIGN KEY (FAC_ID) REFERENCES FACULTY (FAC_ID));



ALTER TABLE FACULTY_LECTURER
	ADD (CONSTRAINT R_16 FOREIGN KEY (LEC_ID) REFERENCES LECTURER (LEC_ID));



ALTER TABLE GROUPS
	ADD (CONSTRAINT R_6 FOREIGN KEY (SPEC_ID) REFERENCES SPECIALITY (SPEC_ID));



ALTER TABLE GROUPS
	ADD (CONSTRAINT R_29 FOREIGN KEY (ACADEM_YEAR_ID) REFERENCES ACADEMIC_YEAR (ACADEM_YEAR_ID));



ALTER TABLE PROGRAM_TRACK
	ADD (CONSTRAINT R_4 FOREIGN KEY (FAC_ID) REFERENCES FACULTY (FAC_ID));



ALTER TABLE RESULTS
	ADD (CONSTRAINT R_17 FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (STUDENT_ID));



ALTER TABLE RESULTS
	ADD (CONSTRAINT R_18 FOREIGN KEY (DISCIPLINE_ID) REFERENCES DISCIPLINE (DISCIPLINE_ID));



ALTER TABLE RESULTS
	ADD (CONSTRAINT R_31 FOREIGN KEY (ACADEM_YEAR_ID) REFERENCES ACADEMIC_YEAR (ACADEM_YEAR_ID));



ALTER TABLE SPECIALITY
	ADD (CONSTRAINT R_26 FOREIGN KEY (PROG_ID) REFERENCES PROGRAM_TRACK (PROG_ID));



ALTER TABLE STUDENT
	ADD (CONSTRAINT R_28 FOREIGN KEY (GROUP_ID) REFERENCES GROUPS (GROUP_ID));



ALTER TABLE TIME_TABLE
	ADD (CONSTRAINT R_19 FOREIGN KEY (WEEK_DAY_ID) REFERENCES WEEK_DAY (WEEK_DAY_ID));



ALTER TABLE TIME_TABLE
	ADD (CONSTRAINT R_20 FOREIGN KEY (ODEVITY_ID) REFERENCES ODEVITY_WEEK (ODEVITY_ID));



ALTER TABLE TIME_TABLE
	ADD (CONSTRAINT R_21 FOREIGN KEY (OCCUPATION_ID) REFERENCES OCCUPATION (OCCUPATION_ID));



ALTER TABLE TIME_TABLE
	ADD (CONSTRAINT R_22 FOREIGN KEY (VARIANT_OCCUPATION_ID) REFERENCES VARIANT_OCCUPATION (VARIANT_OCCUPATION_ID));



ALTER TABLE TIME_TABLE
	ADD (CONSTRAINT R_23 FOREIGN KEY (CLASS_ID) REFERENCES CLASS_ROOM (CLASS_ID));



ALTER TABLE TIME_TABLE
	ADD (CONSTRAINT R_24 FOREIGN KEY (GROUP_ID) REFERENCES GROUPS (GROUP_ID));



ALTER TABLE TIME_TABLE
	ADD (CONSTRAINT R_25 FOREIGN KEY (DISCIPLINE_ID) REFERENCES DISCIPLINE (DISCIPLINE_ID));



CREATE  TRIGGER  tD_ACADEMIC_YEAR AFTER DELETE ON ACADEMIC_YEAR for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on ACADEMIC_YEAR
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* ACADEMIC_YEAR  GROUPS on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0001cb65", PARENT_OWNER="", PARENT_TABLE="ACADEMIC_YEAR"
  CHILD_OWNER="", CHILD_TABLE="GROUPS"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_29", FK_COLUMNS="ACADEM_YEAR_ID" */
	SELECT count(*) INTO NUMROWS
	FROM GROUPS
	WHERE
		/*  %JoinFKPK(GROUPS,:%Old," = "," AND") */
			GROUPS.ACADEM_YEAR_ID = :old.ACADEM_YEAR_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE ACADEMIC_YEAR because GROUPS exists.'
			);
	END IF;

	/* ERwin Builtin Trigger */
	/* ACADEMIC_YEAR  RESULTS on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ACADEMIC_YEAR"
  CHILD_OWNER="", CHILD_TABLE="RESULTS"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_31", FK_COLUMNS="ACADEM_YEAR_ID" */
	SELECT count(*) INTO NUMROWS
	FROM RESULTS
	WHERE
		/*  %JoinFKPK(RESULTS,:%Old," = "," AND") */
			RESULTS.ACADEM_YEAR_ID = :old.ACADEM_YEAR_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE ACADEMIC_YEAR because RESULTS exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_CLASS_ROOM AFTER DELETE ON CLASS_ROOM for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on CLASS_ROOM
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* CLASS_ROOM  TIME_TABLE on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000dae7", PARENT_OWNER="", PARENT_TABLE="CLASS_ROOM"
  CHILD_OWNER="", CHILD_TABLE="TIME_TABLE"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_23", FK_COLUMNS="CLASS_ID" */
	SELECT count(*) INTO NUMROWS
	FROM TIME_TABLE
	WHERE
		/*  %JoinFKPK(TIME_TABLE,:%Old," = "," AND") */
			TIME_TABLE.CLASS_ID = :old.CLASS_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE CLASS_ROOM because TIME_TABLE exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_DISCIPLINE AFTER DELETE ON DISCIPLINE for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on DISCIPLINE
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* DISCIPLINE  RESULTS on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0001d80c", PARENT_OWNER="", PARENT_TABLE="DISCIPLINE"
  CHILD_OWNER="", CHILD_TABLE="RESULTS"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_18", FK_COLUMNS="DISCIPLINE_ID" */
	SELECT count(*) INTO NUMROWS
	FROM RESULTS
	WHERE
		/*  %JoinFKPK(RESULTS,:%Old," = "," AND") */
			RESULTS.DISCIPLINE_ID = :old.DISCIPLINE_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE DISCIPLINE because RESULTS exists.'
			);
	END IF;

	/* ERwin Builtin Trigger */
	/* DISCIPLINE  TIME_TABLE on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="DISCIPLINE"
  CHILD_OWNER="", CHILD_TABLE="TIME_TABLE"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_25", FK_COLUMNS="DISCIPLINE_ID" */
	SELECT count(*) INTO NUMROWS
	FROM TIME_TABLE
	WHERE
		/*  %JoinFKPK(TIME_TABLE,:%Old," = "," AND") */
			TIME_TABLE.DISCIPLINE_ID = :old.DISCIPLINE_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE DISCIPLINE because TIME_TABLE exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_FACULTY AFTER DELETE ON FACULTY for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on FACULTY
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* FACULTY  PROGRAM_TRACK on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0001e794", PARENT_OWNER="", PARENT_TABLE="FACULTY"
  CHILD_OWNER="", CHILD_TABLE="PROGRAM_TRACK"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_4", FK_COLUMNS="FAC_ID" */
	SELECT count(*) INTO NUMROWS
	FROM PROGRAM_TRACK
	WHERE
		/*  %JoinFKPK(PROGRAM_TRACK,:%Old," = "," AND") */
			PROGRAM_TRACK.FAC_ID = :old.FAC_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE FACULTY because PROGRAM_TRACK exists.'
			);
	END IF;

	/* ERwin Builtin Trigger */
	/* FACULTY  FACULTY_LECTURER on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FACULTY"
  CHILD_OWNER="", CHILD_TABLE="FACULTY_LECTURER"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_15", FK_COLUMNS="FAC_ID" */
	SELECT count(*) INTO NUMROWS
	FROM FACULTY_LECTURER
	WHERE
		/*  %JoinFKPK(FACULTY_LECTURER,:%Old," = "," AND") */
			FACULTY_LECTURER.FAC_ID = :old.FAC_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE FACULTY because FACULTY_LECTURER exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_GROUPS AFTER DELETE ON GROUPS for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on GROUPS
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* GROUPS  TIME_TABLE on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0001b564", PARENT_OWNER="", PARENT_TABLE="GROUPS"
  CHILD_OWNER="", CHILD_TABLE="TIME_TABLE"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_24", FK_COLUMNS="GROUP_ID" */
	SELECT count(*) INTO NUMROWS
	FROM TIME_TABLE
	WHERE
		/*  %JoinFKPK(TIME_TABLE,:%Old," = "," AND") */
			TIME_TABLE.GROUP_ID = :old.GROUP_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE GROUPS because TIME_TABLE exists.'
			);
	END IF;

	/* ERwin Builtin Trigger */
	/* GROUPS  STUDENT on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="GROUPS"
  CHILD_OWNER="", CHILD_TABLE="STUDENT"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_28", FK_COLUMNS="GROUP_ID" */
	SELECT count(*) INTO NUMROWS
	FROM STUDENT
	WHERE
		/*  %JoinFKPK(STUDENT,:%Old," = "," AND") */
			STUDENT.GROUP_ID = :old.GROUP_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE GROUPS because STUDENT exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_LECTURER AFTER DELETE ON LECTURER for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on LECTURER
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* LECTURER  FACULTY_LECTURER on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000de00", PARENT_OWNER="", PARENT_TABLE="LECTURER"
  CHILD_OWNER="", CHILD_TABLE="FACULTY_LECTURER"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_16", FK_COLUMNS="LEC_ID" */
	SELECT count(*) INTO NUMROWS
	FROM FACULTY_LECTURER
	WHERE
		/*  %JoinFKPK(FACULTY_LECTURER,:%Old," = "," AND") */
			FACULTY_LECTURER.LEC_ID = :old.LEC_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE LECTURER because FACULTY_LECTURER exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MEGAFACULTY AFTER DELETE ON MEGAFACULTY for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on MEGAFACULTY
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* MEGAFACULTY  FACULTY on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000dcaa", PARENT_OWNER="", PARENT_TABLE="MEGAFACULTY"
  CHILD_OWNER="", CHILD_TABLE="FACULTY"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_33", FK_COLUMNS="MEGAFAC_ID" */
	SELECT count(*) INTO NUMROWS
	FROM FACULTY
	WHERE
		/*  %JoinFKPK(FACULTY,:%Old," = "," AND") */
			FACULTY.MEGAFAC_ID = :old.MEGAFAC_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE MEGAFACULTY because FACULTY exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_OCCUPATION AFTER DELETE ON OCCUPATION for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on OCCUPATION
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* OCCUPATION  TIME_TABLE on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000e735", PARENT_OWNER="", PARENT_TABLE="OCCUPATION"
  CHILD_OWNER="", CHILD_TABLE="TIME_TABLE"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_21", FK_COLUMNS="OCCUPATION_ID" */
	SELECT count(*) INTO NUMROWS
	FROM TIME_TABLE
	WHERE
		/*  %JoinFKPK(TIME_TABLE,:%Old," = "," AND") */
			TIME_TABLE.OCCUPATION_ID = :old.OCCUPATION_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE OCCUPATION because TIME_TABLE exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_ODEVITY_WEEK AFTER DELETE ON ODEVITY_WEEK for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on ODEVITY_WEEK
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* ODEVITY_WEEK  TIME_TABLE on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000d8a9", PARENT_OWNER="", PARENT_TABLE="ODEVITY_WEEK"
  CHILD_OWNER="", CHILD_TABLE="TIME_TABLE"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_20", FK_COLUMNS="ODEVITY_ID" */
	SELECT count(*) INTO NUMROWS
	FROM TIME_TABLE
	WHERE
		/*  %JoinFKPK(TIME_TABLE,:%Old," = "," AND") */
			TIME_TABLE.ODEVITY_ID = :old.ODEVITY_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE ODEVITY_WEEK because TIME_TABLE exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_PROGRAM_TRACK AFTER DELETE ON PROGRAM_TRACK for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on PROGRAM_TRACK
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* PROGRAM_TRACK  SPECIALITY on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000e0bf", PARENT_OWNER="", PARENT_TABLE="PROGRAM_TRACK"
  CHILD_OWNER="", CHILD_TABLE="SPECIALITY"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_26", FK_COLUMNS="PROG_ID" */
	SELECT count(*) INTO NUMROWS
	FROM SPECIALITY
	WHERE
		/*  %JoinFKPK(SPECIALITY,:%Old," = "," AND") */
			SPECIALITY.PROG_ID = :old.PROG_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE PROGRAM_TRACK because SPECIALITY exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_SPECIALITY AFTER DELETE ON SPECIALITY for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on SPECIALITY
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* SPECIALITY  GROUPS on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000d3e9", PARENT_OWNER="", PARENT_TABLE="SPECIALITY"
  CHILD_OWNER="", CHILD_TABLE="GROUPS"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_6", FK_COLUMNS="SPEC_ID" */
	SELECT count(*) INTO NUMROWS
	FROM GROUPS
	WHERE
		/*  %JoinFKPK(GROUPS,:%Old," = "," AND") */
			GROUPS.SPEC_ID = :old.SPEC_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE SPECIALITY because GROUPS exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_STUDENT AFTER DELETE ON STUDENT for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on STUDENT
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* STUDENT  RESULTS on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000d201", PARENT_OWNER="", PARENT_TABLE="STUDENT"
  CHILD_OWNER="", CHILD_TABLE="RESULTS"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_17", FK_COLUMNS="STUDENT_ID" */
	SELECT count(*) INTO NUMROWS
	FROM RESULTS
	WHERE
		/*  %JoinFKPK(RESULTS,:%Old," = "," AND") */
			RESULTS.STUDENT_ID = :old.STUDENT_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE STUDENT because RESULTS exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_VARIANT_OCCUPATION AFTER DELETE ON VARIANT_OCCUPATION for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on VARIANT_OCCUPATION
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* VARIANT_OCCUPATION  TIME_TABLE on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000f743", PARENT_OWNER="", PARENT_TABLE="VARIANT_OCCUPATION"
  CHILD_OWNER="", CHILD_TABLE="TIME_TABLE"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_22", FK_COLUMNS="VARIANT_OCCUPATION_ID" */
	SELECT count(*) INTO NUMROWS
	FROM TIME_TABLE
	WHERE
		/*  %JoinFKPK(TIME_TABLE,:%Old," = "," AND") */
			TIME_TABLE.VARIANT_OCCUPATION_ID = :old.VARIANT_OCCUPATION_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE VARIANT_OCCUPATION because TIME_TABLE exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_WEEK_DAY AFTER DELETE ON WEEK_DAY for each row
	-- ERwin Builtin Trigger
	-- DELETE trigger on WEEK_DAY
DECLARE NUMROWS INTEGER;
BEGIN
	/* ERwin Builtin Trigger */
	/* WEEK_DAY  TIME_TABLE on parent delete no action */
	/* ERWIN_RELATION:CHECKSUM="0000da40", PARENT_OWNER="", PARENT_TABLE="WEEK_DAY"
  CHILD_OWNER="", CHILD_TABLE="TIME_TABLE"
  P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
  FK_CONSTRAINT="R_19", FK_COLUMNS="WEEK_DAY_ID" */
	SELECT count(*) INTO NUMROWS
	FROM TIME_TABLE
	WHERE
		/*  %JoinFKPK(TIME_TABLE,:%Old," = "," AND") */
			TIME_TABLE.WEEK_DAY_ID = :old.WEEK_DAY_ID;
	IF (NUMROWS > 0)
	THEN
		raise_application_error(
				-20001,
				'Cannot DELETE WEEK_DAY because TIME_TABLE exists.'
			);
	END IF;


	-- ERwin Builtin Trigger
END;
/



CREATE  OR REPLACE  TRIGGER TRG_BI_ACADEMIC_YEAR
	BEFORE INSERT
	ON ACADEMIC_YEAR

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_ACADEMIC_YEAR */
BEGIN
	SELECT SEQ_ACADEMIC_YEAR.NEXTVAL INTO :NEW.ACADEM_YEAR_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_CLASS_ROOM
	BEFORE INSERT
	ON CLASS_ROOM

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_CLASS_ROOM */
BEGIN
	SELECT SEQ_CLASS_ROOM.NEXTVAL INTO :NEW.CLASS_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_DISCIPLINE
	BEFORE INSERT
	ON DISCIPLINE

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_DISCIPLINE */
BEGIN
	SELECT SEQ_DISCIPLINE.NEXTVAL INTO :NEW.DISCIPLINE_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_FACULTY
	BEFORE INSERT
	ON FACULTY

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_FACULTY */

BEGIN
	SELECT SEQ_FACULTY.NEXTVAL INTO :NEW.FAC_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_FACULTY_LECTURER
	BEFORE INSERT
	ON FACULTY_LECTURER

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_FACULTY_LECTURER */

BEGIN
	SELECT SEQ_FACULTY_LECTURER.NEXTVAL INTO :NEW.FAC_LECT_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_GROUP
	BEFORE INSERT
	ON GROUPS

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_GROUP */
BEGIN
	SELECT SEQ_GROUP.NEXTVAL INTO :NEW.GROUP_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_LECTURER
	BEFORE INSERT
	ON LECTURER

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_LECTURER */
BEGIN
	SELECT SEQ_LECTURER.NEXTVAL INTO :NEW.LEC_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_MEGAFACULTY
	BEFORE INSERT
	ON MEGAFACULTY

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_MEGAFACULTY */
BEGIN
	SELECT SEQ_MEGAFACULTY.NEXTVAL INTO :NEW.MEGAFAC_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_OCCUPATION
	BEFORE INSERT
	ON OCCUPATION

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_OCCUPATION */
BEGIN
	SELECT SEQ_OCCUPATION.NEXTVAL INTO :NEW.OCCUPATION_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_ODEVITY_WEEK
	BEFORE INSERT
	ON ODEVITY_WEEK

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_ODEVITY_WEEK */
BEGIN
	SELECT SEQ_ODEVITY_WEEK.NEXTVAL INTO :NEW.ODEVITY_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_PROGRAM_TRACK
	BEFORE INSERT
	ON PROGRAM_TRACK

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_PROGRAM_TRACK */
BEGIN
	SELECT SEQ_PROGRAM_TRACK.NEXTVAL INTO :NEW.PROG_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_RESULTS
	BEFORE INSERT
	ON RESULTS

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_RESULTS */
BEGIN
	SELECT SEQ_RESULTS.NEXTVAL INTO :NEW.RESULT_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_SPECIALITY
	BEFORE INSERT
	ON SPECIALITY

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_SPECIALITY */
BEGIN
	SELECT SEQ_SPECIALITY.NEXTVAL INTO :NEW.SPEC_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_STUDENT
	BEFORE INSERT
	ON STUDENT

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_STUDENT */
BEGIN
	SELECT SEQ_STUDENT.NEXTVAL INTO :NEW.STUDENT_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_VARIANT_OCCUPATION
	BEFORE INSERT
	ON VARIANT_OCCUPATION

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_VARIANT_OCCUPATION */
BEGIN
	SELECT SEQ_VARIANT_OCCUPATION.NEXTVAL INTO :NEW.VARIANT_OCCUPATION_ID FROM DUAL;
END;


/




CREATE  OR REPLACE  TRIGGER TRG_BI_WEEK_DAY
	BEFORE INSERT
	ON WEEK_DAY

	for each row

	/* ERwin Builtin Trigger */
	/* default body for TRG_BI_WEEK_DAY */
BEGIN
	SELECT SEQ_WEEK_DAY.NEXTVAL INTO :NEW.WEEK_DAY_ID FROM DUAL;
END;


/


